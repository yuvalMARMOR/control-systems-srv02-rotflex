%% ????? ???? ???????? ????? ???? ?? ????? ????? ?? ????? ???
% Digital Control System for Flexible Joint with Numerical State Estimation
% ???? ?????? ??? ?????? ????? ?????

clear all; close all; clc;

%% ????? ?????? ??????
% System Parameters Definition

% ????? ???? ?????
if ~exist('setup_srv02_configuration', 'file')
    run('config_srv02.m');
end
if ~exist('config_rotflex', 'file')
    run('config_rotflex.m');
end

% ????? SRV02
EXT_GEAR_CONFIG = 'HIGH';
ENCODER_TYPE = 'E';
TACH_OPTION = 'NO';
AMP_TYPE = 'UPM_1503';
LOAD_TYPE = 'ROTFLEX';

% ????? ROTFLEX
SPRING = 2;           % ???? ??????
HUB_POSITION = 'B';   % ????? ?? ????
ARM_POSITION = 2;     % ????? ?? ?????
ARM_LOAD = 0;         % ??? ???? ????
ROTFLEX_OPTION = 'ROTFLEX';

% ???? ?????? ??????
[Rm, kt, km, Kg, eta_g, Beq, Jm, Jeq, eta_m, K_POT, K_TACH, K_ENC, VMAX_AMP, IMAX_AMP] = ...
    config_srv02(EXT_GEAR_CONFIG, ENCODER_TYPE, TACH_OPTION, AMP_TYPE, LOAD_TYPE);

[Jarm, Barm, Ks, RtflxOp, K_POT_ROT] = config_rotflex(SPRING, HUB_POSITION, ARM_POSITION, ARM_LOAD, ROTFLEX_OPTION);

% ????? ????? ??????
K_Stiff = Ks;
Jeq_total = Jeq + Jarm;

%% ????? ??????? ???? ????? ?????
% Continuous State-Space Matrices Construction

% ?????? ?????? A
A = zeros(4,4);
A(1,3) = 1;
A(2,4) = 1;
A(3,2) = K_Stiff/Jeq;
A(3,3) = -(eta_g*Kg^2*eta_m*kt*km + Beq*Rm)/(Rm*Jeq);
A(4,2) = -K_Stiff*(Jeq + Jarm)/(Jeq*Jarm);
A(4,3) = (eta_g*Kg^2*eta_m*kt*km + Beq*Rm)/(Rm*Jeq);

% ?????? ?????? B
B = zeros(4,1);
B(3) = eta_g*Kg*eta_m*kt/(Rm*Jeq);
B(4) = -eta_g*Kg*eta_m*kt/(Rm*Jeq);

% ?????? ???? C - ?? ??????? ??????
C = zeros(2,4);
C(1,1) = 1;  % ? - ????? ?????
C(2,2) = 1;  % ? - ????? ?????

% ?????? ????? ?????? D
D = zeros(2,1);

% ????? ???? ????
sys_cont = ss(A, B, C, D);

%% ????? ?????? ????? ??????
% Sampling Intervals Definition

Ts_values = [0.002, 0.05, 0.1];  % ?????
Ts_names = {'Ts = 0.002s', 'Ts = 0.05s', 'Ts = 0.1s'};

%% ????? ??? ???? (???????)
% Continuous Controller Design (for comparison)

% ????? ?????? ????? S
p_cont = [-10, -15, -20, -25];

% ????? ??? ???? ???
K_cont = place(A, B, p_cont);

% ????? ??? ????????
KI_cont = [1.6, 1.6];

%% ???????? ???????
% Simulation and Comparison

% ??? ????????
t_final = 5;  % ?????
t_cont = 0:0.001:t_final;

% ????? ?????
ref_theta = 0.5;  % ?????
ref_alpha = 0.3;  % ?????

% ????? ??????
results = struct();

%% ????????? ????????? ?? ?????? ????? ?????
% Digital Simulations with Different Sampling Intervals

for i = 1:length(Ts_values)
    Ts = Ts_values(i);
    disp(['???? ???????? ???????? ?? ', Ts_names{i}, '...']);
    
    % ???? ????? ????
    sys_disc = c2d(sys_cont, Ts, 'zoh');
    Ad = sys_disc.A;
    Bd = sys_disc.B;
    Cd = sys_disc.C;
    Dd = sys_disc.D;
    
    % ????? ??????
    p_disc = exp(p_cont * Ts);
    
    % ????? ??? ????
    K_disc = place(Ad, Bd, p_disc);
    
    % ????? ??? ???????? ????
    KI_disc = KI_cont * Ts;
    
    % ???????? ????????
    [t_disc, y_disc, x_disc] = simulate_digital_system(Ad, Bd, Cd, K_disc, KI_disc, Ts, t_final, ref_theta, ref_alpha);
    
    % ????? ??????
    results(i).Ts = Ts;
    results(i).t = t_disc;
    results(i).y = y_disc;
    results(i).x = x_disc;
    results(i).K = K_disc;
    results(i).KI = KI_disc;
end

%% ???? ??????
% Results Display

plot_comparison_results(results, Ts_names, t_cont, ref_theta, ref_alpha);

%% ????? ?????? ???????
% Stability and Sensitivity Analysis

disp('???? ????? ??????...');

figure('Position', [100, 100, 1000, 600]);

% ????? ?????
subplot(1,2,1);
hold on;
for i = 1:length(Ts_values)
    Ts = Ts_values(i);
    sys_disc = c2d(sys_cont, Ts, 'zoh');
    p_disc = exp(p_cont * Ts);
    K_disc = place(sys_disc.A, sys_disc.B, p_disc);
    
    % ???? ?????? ??????
    A_cl = sys_disc.A - sys_disc.B * K_disc;
    eig_cl = eig(A_cl);
    
    plot(real(eig_cl), imag(eig_cl), 'o', 'MarkerSize', 10, 'LineWidth', 2, ...
         'DisplayName', Ts_names{i});
end

% ???? ??????
theta = 0:0.01:2*pi;
plot(cos(theta), sin(theta), '--k', 'LineWidth', 1, 'DisplayName', '???? ??????');
xlabel('Real Part');
ylabel('Imaginary Part');
title('????? ????? ????? Z');
legend('Location', 'best');
grid on;
axis equal;

% ????? ?????? ????
subplot(1,2,2);
hold on;
noise_levels = [0, 0.001, 0.005, 0.01];  % ???? ???
Ts_test = 0.05;  % ????? ????? ??????

for noise_level = noise_levels
    % ???????? ?? ???
    [t_noise, y_noise] = simulate_with_noise(sys_cont, Ts_test, t_final, ref_theta, ref_alpha, noise_level);
    plot(t_noise, y_noise(1,:), 'LineWidth', 2, 'DisplayName', ['??? = ', num2str(noise_level)]);
end

xlabel('??? (?????)');
ylabel('? (?????)');
title('?????? ???? ???????');
legend('Location', 'best');
grid on;

sgtitle('????? ?????? ???????', 'FontSize', 14);

%% ????? ??????
% Results Summary

disp('=== ????? ?????? ===');
disp('????? ???? ???????? ????? ???? ?? ????? ????? ?? ????? ???');
disp('');

for i = 1:length(results)
    Ts = results(i).Ts;
    disp(['????? ?????: ', num2str(Ts), ' ?????']);
    
    % ????? ???????
    final_theta = results(i).y(1,end);
    final_alpha = results(i).y(2,end);
    
    error_theta = abs(ref_theta - final_theta);
    error_alpha = abs(ref_alpha - final_alpha);
    
    disp(['  ????? ?????? ?????: ', num2str(error_theta, '%.4f'), ' ?????']);
    disp(['  ????? ?????? ?????: ', num2str(error_alpha, '%.4f'), ' ?????']);
    disp(['  ??? ??????? (?????): ', num2str(find(abs(results(i).y(1,:) - ref_theta) < 0.05*ref_theta, 1) * Ts, '%.3f'), ' ?????']);
    disp('');
end

disp('????? ??????:');
disp('1. ????????? ??????? ??????? ??????????? ??????');
disp('2. ?????? ????? ???? ??????? - ???? ????? ?????');
disp('3. ?????? ????? ?????? ??????? ??????');
disp('4. ???? ??????????? ????? ?? ?????? ????');

%% ???????? ???
% Helper Functions

function [t, y, x] = simulate_digital_system(Ad, Bd, Cd, K, KI, Ts, t_final, ref_theta, ref_alpha)
    % ???????? ?? ????? ???????? ?? ????? ????? ?? ????????
    
    N = ceil(t_final/Ts);
    t = (0:N-1) * Ts;
    
    % ????? ??????
    x = zeros(4, N);
    y = zeros(2, N);
    u = zeros(1, N);
    
    % ????? ??? ??????? (?? ????? ?????)
    x_est = zeros(4, N);
    
    % ?????? ??????????
    int_error_theta = 0;
    int_error_alpha = 0;
    
    % ???? ?????
    x(:,1) = [0; 0; 0; 0];
    x_est(:,1) = [0; 0; 0; 0];
    
    for k = 1:N-1
        % ?????? (?? ??????)
        y(:,k) = Cd * x(:,k);
        
        % ????? ??????
        error_theta = ref_theta - y(1,k);
        error_alpha = ref_alpha - y(2,k);
        
        % ????? ????????
        int_error_theta = int_error_theta + error_theta * Ts;
        int_error_alpha = int_error_alpha + error_alpha * Ts;
        
        % ????? ????? ?? ???????? (???????????)
        if k > 1
            x_est(3,k) = (y(1,k) - y(1,k-1)) / Ts;  % ??
            x_est(4,k) = (y(2,k) - y(2,k-1)) / Ts;  % ??
        end
        
        % ????? ????? ??? ???????
        x_est(1,k) = y(1,k);  % ?
        x_est(2,k) = y(2,k);  % ?
        
        % ????? ??? ?????
        u(k) = K * x_est(:,k) + KI(1) * int_error_theta + KI(2) * int_error_alpha;
        
        % ????? ??? ??????
        x(:,k+1) = Ad * x(:,k) + Bd * u(k);
    end
    
    % ????? ??????
    y(:,N) = Cd * x(:,N);
end

function plot_comparison_results(results, Ts_names, t_cont, ref_theta, ref_alpha)
    % ???? ?????? ???????
    
    figure('Position', [100, 100, 1200, 800]);
    
    % ??? ????? ?????
    subplot(2,2,1);
    hold on;
    for i = 1:length(results)
        plot(results(i).t, results(i).y(1,:), 'LineWidth', 2, 'DisplayName', Ts_names{i});
    end
    plot(t_cont, ref_theta * ones(size(t_cont)), '--k', 'LineWidth', 2, 'DisplayName', '?????');
    xlabel('??? (?????)');
    ylabel('? (?????)');
    title('????? ????? - ?????? ??? ?????? ?????');
    legend('Location', 'best');
    grid on;
    
    % ??? ????? ?????
    subplot(2,2,2);
    hold on;
    for i = 1:length(results)
        plot(results(i).t, results(i).y(2,:), 'LineWidth', 2, 'DisplayName', Ts_names{i});
    end
    plot(t_cont, ref_alpha * ones(size(t_cont)), '--k', 'LineWidth', 2, 'DisplayName', '?????');
    xlabel('??? (?????)');
    ylabel('? (?????)');
    title('????? ????? - ?????? ??? ?????? ?????');
    legend('Location', 'best');
    grid on;
    
    % ??? ???????? (??????? ??????)
    subplot(2,2,3);
    hold on;
    for i = 1:length(results)
        plot(results(i).t, results(i).x(3,:), 'LineWidth', 2, 'DisplayName', ['?? - ', Ts_names{i}]);
    end
    xlabel('??? (?????)');
    ylabel('?? (?????/?????)');
    title('?????? ??????? ?? ????? (?????? ??????)');
    legend('Location', 'best');
    grid on;
    
    % ??? ??? ?????
    subplot(2,2,4);
    hold on;
    for i = 1:length(results)
        % ????? ??? ????? (?????)
        u_approx = zeros(size(results(i).t));
        for k = 1:length(results(i).t)
            if k > 1
                error_theta = ref_theta - results(i).y(1,k);
                error_alpha = ref_alpha - results(i).y(2,k);
                u_approx(k) = results(i).K * results(i).x(:,k) + ...
                             results(i).KI(1) * error_theta + results(i).KI(2) * error_alpha;
            end
        end
        plot(results(i).t, u_approx, 'LineWidth', 2, 'DisplayName', Ts_names{i});
    end
    xlabel('??? (?????)');
    ylabel('??? ???? (V)');
    title('??? ????? - ?????? ??? ?????? ?????');
    legend('Location', 'best');
    grid on;
    
    sgtitle('?????? ?????? ????? ???? ???????? ?? ????? ????? ?? ????? ???', 'FontSize', 14);
end

function [t, y] = simulate_with_noise(sys_cont, Ts, t_final, ref_theta, ref_alpha, noise_level)
    % ???????? ?? ??? ???????
    
    sys_disc = c2d(sys_cont, Ts, 'zoh');
    p_cont = [-10, -15, -20, -25];
    p_disc = exp(p_cont * Ts);
    K_disc = place(sys_disc.A, sys_disc.B, p_disc);
    KI_disc = [1.6, 1.6] * Ts;
    
    N = ceil(t_final/Ts);
    t = (0:N-1) * Ts;
    
    x = zeros(4, N);
    y = zeros(2, N);
    u = zeros(1, N);
    
    x_est = zeros(4, N);
    int_error_theta = 0;
    int_error_alpha = 0;
    
    for k = 1:N-1
        % ?????? ?? ???
        y_clean = sys_disc.C * x(:,k);
        y(:,k) = y_clean + noise_level * randn(2,1);
        
        % ????? ??????
        error_theta = ref_theta - y(1,k);
        error_alpha = ref_alpha - y(2,k);
        
        % ????? ????????
        int_error_theta = int_error_theta + error_theta * Ts;
        int_error_alpha = int_error_alpha + error_alpha * Ts;
        
        % ????? ????? ?? ???????? ?? ???
        if k > 1
            x_est(3,k) = (y(1,k) - y(1,k-1)) / Ts;
            x_est(4,k) = (y(2,k) - y(2,k-1)) / Ts;
        end
        
        x_est(1,k) = y(1,k);
        x_est(2,k) = y(2,k);
        
        % ??? ????
        u(k) = K_disc * x_est(:,k) + KI_disc(1) * int_error_theta + KI_disc(2) * int_error_alpha;
        
        % ????? ???
        x(:,k+1) = sys_disc.A * x(:,k) + sys_disc.B * u(k);
    end
    
    y(:,N) = sys_disc.C * x(:,N) + noise_level * randn(2,1);
end
